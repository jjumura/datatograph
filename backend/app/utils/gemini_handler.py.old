import os
from dotenv import load_dotenv
import google.generativeai as genai
from typing import Dict, Any, List
import logging

# 濡쒓퉭 ?ㅼ젙
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ?섍꼍 蹂??濡쒕뱶
load_dotenv()

# Gemini API ??媛?몄삤湲?
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY not found in environment variables")

# Gemini API ?ㅼ젙
genai.configure(api_key=GEMINI_API_KEY)

# ?꾩뿭 紐⑤뜽 ?몄뒪?댁뒪
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')

async def get_gemini_response(prompt: str) -> str:
    """
    Gemini API瑜??ъ슜?섏뿬 ?꾨＼?꾪듃??????묐떟???앹꽦?⑸땲??
    
    Args:
        prompt: Gemini API???꾩넚???꾨＼?꾪듃
        
    Returns:
        str: Gemini API媛 ?앹꽦???묐떟 ?띿뒪??
    """
    try:
        response = await gemini_model.generate_content_async(prompt)
        return response.text
    except Exception as e:
        logger.error(f"Gemini API ?몄텧 以??ㅻ쪟 諛쒖깮: {str(e)}")
        raise Exception(f"Gemini API ?몄텧 ?ㅽ뙣: {str(e)}")

class GeminiHandler:
    """Gemini API瑜??ъ슜?섏뿬 ?곗씠??遺꾩꽍 諛??몄궗?댄듃瑜??앹꽦?섎뒗 ?대옒??""
    
    def __init__(self):
        self.model = genai.GenerativeModel('gemini-1.5-flash-latest')
    
    async def analyze_data(self, data: Dict[str, Any]) -> str:
        """
        ?곗씠?곕? 遺꾩꽍?섍퀬 ?몄궗?댄듃瑜??앹꽦?⑸땲??
        
        Args:
            data: 遺꾩꽍???곗씠??
            
        Returns:
            str: ?앹꽦??遺꾩꽍 寃곌낵
        """
        try:
            prompt = f"""
            ?ㅼ쓬 ?곗씠?곕? 遺꾩꽍?섍퀬 二쇱슂 ?몄궗?댄듃瑜??쒓났?댁＜?몄슂:
            {data}
            
            ?ㅼ쓬 ?뺤떇?쇰줈 ?묐떟?댁＜?몄슂:
            1. 二쇱슂 ?몃젋??
            2. ?댁긽移??먮뒗 ?뱀씠?ы빆
            3. 異붿쿇 ?ы빆
            """
            
            response = await self.model.generate_content_async(prompt)
            return response.text
            
        except Exception as e:
            logger.error(f"?곗씠??遺꾩꽍 以??ㅻ쪟 諛쒖깮: {str(e)}")
            return f"?곗씠??遺꾩꽍 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎: {str(e)}"
    
    async def generate_chart_description(self, chart_type: str, data_summary: Dict[str, Any]) -> str:
        """
        李⑦듃? ?곗씠?곗뿉 ????ㅻ챸???앹꽦?⑸땲??
        
        Args:
            chart_type: 李⑦듃 ?좏삎
            data_summary: ?곗씠???붿빟 ?뺣낫
            
        Returns:
            str: ?앹꽦??李⑦듃 ?ㅻ챸
        """
        try:
            prompt = f"""
            ?ㅼ쓬 李⑦듃? ?곗씠?곗뿉 ????ㅻ챸???앹꽦?댁＜?몄슂:
            李⑦듃 ?좏삎: {chart_type}
            ?곗씠???붿빟: {data_summary}
            
            ?ㅼ쓬???ы븿?섏뿬 ?ㅻ챸?댁＜?몄슂:
            1. 李⑦듃媛 蹂댁뿬二쇰뒗 二쇱슂 ?뺣낫
            2. ?곗씠?곗쓽 ?뱀쭠
            3. ?쒓컖?붾? ?듯빐 ?살쓣 ???덈뒗 ?몄궗?댄듃
            """
            
            response = await self.model.generate_content_async(prompt)
            return response.text
            
        except Exception as e:
            logger.error(f"李⑦듃 ?ㅻ챸 ?앹꽦 以??ㅻ쪟 諛쒖깮: {str(e)}")
            return f"李⑦듃 ?ㅻ챸 ?앹꽦 以??ㅻ쪟媛 諛쒖깮?덉뒿?덈떎: {str(e)}" 
